---
- name: "[PROMETHEUS APB][{{ mode | upper }}] Set Non-Secured scheme for Prometheus server"
  set_fact:
    scheme: 'http'
  when: not PROMETHEUS_SECURED_DEPLOYMENT | bool

- name: "[PROMETHEUS APB][{{ mode | upper }}] Set Secured scheme for Prometheus server"
  set_fact:
    scheme: 'https'
  when: PROMETHEUS_SECURED_DEPLOYMENT | bool

# Test for Prometheus
- name: "[PROMETHEUS APB][{{ mode | upper }}] Check the Prometheus server is accesible"
  uri:
    url: "{{ scheme }}://{{ prometheus_svc.service.spec.cluster_ip }}"
    return_content: yes
    validate_certs: no
  register: webpage
  retries: 10
  delay: 20
  failed_when: webpage.status == 404
  until: '"Sign in with an OpenShift account" in webpage.content'

- name: "[PROMETHEUS APB][{{ mode | upper }}] Saving Tests results on error"
  asb_save_test_result:
    fail: True
    msg: "Test Failed. Error connecting with Prometheus Server. Data - {{ webpage }}"
  when: webpage.failed | bool

# Test for Alertmanager
- name: "[PROMETHEUS APB][{{ mode | upper }}] Ensure that Alertmanager is up"
  wait_for:
    port: "{{ prometheus_alertmanager_port }}" 
    host: "{{ service_name_am }}"
    timeout: 20               
  register: alertmanager_conn       
  
- name: "[PROMETHEUS APB][{{ mode | upper }}] Saving Tests results on error"
  asb_save_test_result:
    fail: True
    msg: "Test Failed. Error connecting with Alertmanager Server. Data - {{ alertmanager_conn }}"
  when: 
    - alertmanager_conn.failed | bool

# Test for Grafana
- name: "[PROMETHEUS APB][{{ mode | upper }}] Check the Grafana server is accesible"
  uri:
    url: "{{ scheme }}://{{ prometheus_grafana_svc.service.spec.cluster_ip }}"
    return_content: yes
    validate_certs: no
  register: grafana
  retries: 10
  delay: 20
  failed_when: grafana.status == 404
  until: '"Sign in with an OpenShift account" in webpage.content'
  when: DEPLOY_GRAFANA | bool

- name: "[PROMETHEUS APB][{{ mode | upper }}] Saving Tests results on error"
  asb_save_test_result:
    fail: True
    msg: "Test Failed. Error connecting to Grafana Server. Data - {{ grafana }}"
  when:
    - grafana.failed | bool
    - DEPLOY_GRAFANA | bool

# Test for Alertbuffer
- name: "[PROMETHEUS APB][{{ mode | upper }}] Ensure that Alertbuffer is up"
  wait_for:
    port: "{{ prometheus_alertbuffer_port }}" 
    host: "{{ service_name_ab_proxy }}"
    timeout: 20               
  register: alertbuffer_conn       
  
- name: "[PROMETHEUS APB][{{ mode | upper }}] Saving Tests results on error"
  asb_save_test_result:
    fail: True
    msg: "Test Failed. Error connecting with Alertbuffer Server. Data - {{ alertbuffer_conn }}"
  when: 
    - alertbuffer_conn.failed | bool
    - DEPLOY_ALERTBUFFER | bool

